.container {
  margin: 200px;
}

.parent {
  height: 200px;
  width: 600px;
  border: 1px solid black;
  position: relative;
  background-color: red;
}

.parent::after {
  position: absolute;
  height: 50px;
  width: 50px;
  border-left: 0px solid black;
  border-top: 0px solid black;
  border-right: 1px solid black;
  border-bottom: 1px solid black;
  content: "";
  top: 100%;
  left: 45%;
  transform: rotate(45deg);
  margin-top: -25px;
  background-color: red;
}

label::after {
  content: "*";
}

fieldset {
  margin-top: 50px;
  height: 20vh;
  position: sticky;
  top: 0px;
  width: clamp(50%, 10px, 80%); // min-width, preferred-width, max-width in one line
}

body {
  height: 200vh;
}

.testing::after {
  content: attr(data-testing);
}


:root {
  --blue: #1e90ff;
  --white: #ffffff;
}

body { background-color: var(--blue); }

/**
 flexbox::

flexbox container properties:
-----------------------------
display: flex;
flex-wrap: wrap;
flex-direction: column/row;
justify-content: space-between/space-around/space-evenly/flex-start/flex-end/center;
align-item: flex-start/flex-end/center/stretch;   // default: stretch


flexbox item properties:
-----------------------------
flex: 1;   // default 1 1 auto
flex: 1 1 auto;  [flex-grow][flex-shrink][flex-basis]
flex-grow: 1;
flex-shrink: 1;
flex-basis: 200px;   // width
order: 1
align-self: flex-end/flex-start/center/stretch
 */

/**
flex:1 is by default is flex: 1 1 auto
flex-grow // default is 0
flex-shrink // default is 1
flex-basis // default is auto

flex-basis is basically determine your width
 
if only flex-basis -> flex-basis value is of flex-basis
if flex-basis with max-width -> flex-basis value is min of flex-basis or max-width
if flex-basis with min-width -> flex-basis value is max of flex-basis or min-width
if flex-basis with min-width and max-width -> flex-basis values is of flex-basis, and it should be mandatory in -> min-width>=flex-bssis>=max-width
*/
